#include <dt-bindings/zmk/mouse.h>
#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/*

   &mmv_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

   &msc_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

 */

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&kp ESC    &kp Q  &kp W  &kp E      &kp R             &kp T                                &none                         &kp Y  &kp U      &kp I      &kp O    &kp P     &trans
&kp TAB    &kp A  &kp S  &kp D      &kp F             &kp G                &kp C_PREVIOUS  &kp C_PLAY_PAUSE  &kp C_NEXT  &kp H  &kp J      &kp K      &kp L    &kp RET   &kp LSHFT
&kp LSHFT  &kp Z  &kp X  &kp C      &kp V             &kp B  &kp C_MUTE                    &none                         &kp N  &kp M      &kp COMMA  &kp DOT  &kp BSPC  &kp LSHFT
                         &kp LCTRL  &kp LEFT_COMMAND  &mo 2                                                              &mo 1  &kp SPACE  &kp LALT
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        nav {
            bindings = <
&trans  &trans  &kp N1  &kp N2  &kp N3  &kp DOT                              &trans          &kp LS(STAR)  &kp HOME               &kp UP_ARROW    &kp END          &kp PG_UP  &trans
&trans  &trans  &kp N4  &kp N5  &kp N6  &kp N0                       &trans  &trans  &trans  &trans        &kp LEFT_ARROW         &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp PG_DN  &trans
&trans  &trans  &kp N7  &kp N8  &kp N9  &kp BSPC  &rgb_ug RGB_TOG            &trans          &trans        &kp LS(LC(LA(QMARK)))  &kp ESC         &kp TAB          &kp DEL    &trans
                        &trans  &trans  &trans                                               &trans        &trans                 &trans
            >;

            sensor-bindings = <&rgb_encoder>;
        };

        num_sym {
            bindings = <
&trans  &kp LS(AT)    &kp LS(PRCNT)  &kp LS(UNDER)  &kp LS(CARET)  &kp LS(STAR)                    &trans          &kp PLUS   &kp LBKT                  &kp RBKT      &kp LS(LT)     &kp LS(GT)     &kp LS(PIPE)
&trans  &kp SQT       &kp LS(DQT)    &kp LS(EXCL)   &kp LS(QMARK)  &none                   &trans  &trans  &trans  &kp MINUS  &kp LS(LEFT_PARENTHESIS)  &kp LS(RPAR)  &kp LS(COLON)  &kp SEMI       &trans
&trans  &kp LS(DLLR)  &kp LS(POUND)  &kp LS(AMPS)   &none          &none         &trans            &trans          &kp EQUAL  &kp LS(LBRC)              &kp LS(RBRC)  &kp FSLH       &kp LS(UNDER)  &kp BSLH
                                     &trans         &trans         &trans                                          &trans     &trans                    &trans
            >;
        };
    };
};
